
Quiz 10 - quiz10-2017.docx
1.  Write the code that creates a Scanner that can read a line from a file on the file system. 
  - Scanner sc = new Scanner(new File("myFile.java"))
  - sc.readLine();

2.  The java.io package contains 17 classes of Exceptions and only 1 class of Error because
  a.  The programmers were in a hurry to release the product and did not have time to think up more Error classes. 
  --> b.  Our program might recover from an Exception, but not from an Error, so we should focus on Exceptions instead. 

3.  Java's built-in stream for output System.out is in the package java.lang, and we used it in HelloWorld.java 

4.  System.out.print() writes to standard output. What is the equivalent method for reading from standard input? 
  - System.in.read()

5.  java.io.Writer is an abstract class that is extended by java.io.BufferedWriter and java.io.FileWriter.
  a.  Why should java.io.Writer be an abstract class instead of an interface? 
    - because we want the Writer class to have specific functionality

  b.  Instead of a regular class? 
    - because how the Writer functionality is implemented will vary depending on the types of "writing" (eg audio)

6.  What does read() return at the end of the file? 
  -   -1
7.  Would the value of 0 be a better choice for the return value of read() at the end of the file? 
  - No

8.  A finally block is useful for closing a connection to a database, but is it also useful for closing a File? 
  - Yes

9.  What is the fully-qualified name of the Exception that is specifically for, and most general to, the io package? 
  - java.lang.Throwable

10. Verify that java.io.BufferedReader and java.io.Console have a method that allows you to read an entire line of text from the keyboard.
  a.  Why would you want your application to read an entire line of text rather than read a single character at a time?  Yes
  b.  The name of this method is: readLine
  c.  What is the return type of this method?  String
  d.  Which value is returned if the method cannot find a line of text to return?  null

11. The following code    
  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  
  converts keyboard bytes into a non-buffered input stream reader and finally into a buffered reader. 

12. Write the code in the previous question as two separate lines of code. 
  InputStreamReader streamReader = new InputStreamReader(System.in)
  BufferedReader br = new BufferedReader(streamReader);  


13. True or False:
a.  It is better to write the logic of the previous question as two separate lines of code because this makes the logic more clear. 
  - False

b.  It is better to write the logic of the previous question as a single line of code because we do not need two indentifiers in this particular case. 
  - True

14. Is it possible to compare two files, character-by-character, by using a non-buffered FileInputStream? (See FileComparison.java) 
  - Yes

15. Can write(byte[] b, int offset, int lenOfByteArray) on a FileOutputStream be used to write out an entire file? (See CopyFileWithStream.java) 
  - Look at copy file to stream for answer to this.

16. Why is System.out static? 
  - more convenient that having to write System mySystem() = new System in each and every program
  - You

17. Why is System.out final? 
  - so we cannot change it

18. Which methods in java.io.Reader are abstract? 
  - read, close

19. Why would those methods be abstract? 
  - so we can accomidate various types

20. Can a subclass override other methods of java.io.Reader? 
  - yes, because there are additional methods in the class Reader are not final

21. Creating a multithreaded program can be useful because:
  a.  In the case of an ATM, it allows one program instance to provide services to multiple customers.  - True
  b.  In the case of a Word processor, it allows the user to run a spell check at the same time the program is sending a job to the printer.  - True
  c.  One thread can run the main program while a separate thread listens for a user clicking a button or resizing a window.  - True
  d.  In the case of an internet commerce application, one thread can validate a credit card number while another thread sends a promotional message.  - True
  e.  Such a programming task is complex and therefore increases the programmer's job security.  - No wrong answer

22. Regarding the APIs for multithreading:
  a.  Which interface allows you to create a thread?  java.lang.Runnable
  b.  What does that interface specify?  the run method
  c.  Why use this interface instead of creating a subclass of Thread and overridings its methods? See http://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html  -- it is lightweight to implement just one method (run). We should not subclass a class unless we have no other good alternatives. Keep debugging more simple by using the interface instead of subclassing